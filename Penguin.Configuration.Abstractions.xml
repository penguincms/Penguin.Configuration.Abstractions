<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Penguin.Configuration.Abstractions</name>
    </assembly>
    <members>
        <member name="M:Penguin.Configuration.Abstractions.Extensions.IProvideConfigurationExtensions.FindConnectionString(Penguin.Configuration.Abstractions.Interfaces.IProvideConfigurations,System.String)">
            <summary>
            Recursively searches for a connection string by name. Allows for linking connection strings to eachother by name
            </summary>
            <param name="provider">The provider to use</param>
            <param name="toTest">The name (or connection string) to return</param>
            <returns>The furthest resolvable value representing the connection string</returns>
        </member>
        <member name="M:Penguin.Configuration.Abstractions.Extensions.IProvideConfigurationExtensions.GetBool(Penguin.Configuration.Abstractions.Interfaces.IProvideConfigurations,System.String)">
            <summary>
            Gets a configuration value as a bool
            </summary>
            <param name="provider"></param>
            <param name="Name">the name of the configuration value to get</param>
            <returns>The configuration value, or false if null</returns>
        </member>
        <member name="M:Penguin.Configuration.Abstractions.Extensions.IProvideConfigurationExtensions.GetDictionary(Penguin.Configuration.Abstractions.Interfaces.IProvideConfigurations,System.String)">
            <summary>
            Returns a string value from an IProvideConfigurations as a Dictionary, assuming its delimited in Key=Value; notation
            </summary>
            <param name="provider">The provider to use as a source</param>
            <param name="key">The Key to search for</param>
            <returns>A dictionary representing the key value pairs found in the configuration value</returns>
        </member>
        <member name="M:Penguin.Configuration.Abstractions.Extensions.IProvideConfigurationExtensions.GetInt(Penguin.Configuration.Abstractions.Interfaces.IProvideConfigurations,System.String)">
            <summary>
            Gets a configuration as an int
            </summary>
            <param name="provider">The provider to use</param>
            <param name="Name">The name of the configuration to get</param>
            <returns>the int representation (or 0 if null)</returns>
        </member>
        <member name="M:Penguin.Configuration.Abstractions.Extensions.IProvideConfigurationExtensions.ConnectionStringOrConfiguration(Penguin.Configuration.Abstractions.Interfaces.IProvideConfigurations,System.String)">
            <summary>
            Checks connection strings first, then configurations
            </summary>
            <param name="provider">The IConfigurationProvider</param>
            <param name="Name">The name of the connection string/configuration</param>
            <returns>The value, if any is found, or null</returns>
        </member>
        <member name="M:Penguin.Configuration.Abstractions.Extensions.IProvideConfigurationExtensions.IsDebug(Penguin.Configuration.Abstractions.Interfaces.IProvideConfigurations)">
            <summary>
            Checks for the configuration "Debug" and returns its value
            </summary>
            <param name="provider">The provider to use</param>
            <returns>The value of "Debug"</returns>
        </member>
        <member name="T:Penguin.Configuration.Abstractions.Interfaces.IProvideConfigurations">
            <summary>
            An interface for any object that provides configuration information to the application
            </summary>
        </member>
        <member name="P:Penguin.Configuration.Abstractions.Interfaces.IProvideConfigurations.AllConfigurations">
            <summary>
            Returns a dictionary of all found configurations
            </summary>
        </member>
        <member name="P:Penguin.Configuration.Abstractions.Interfaces.IProvideConfigurations.AllConnectionStrings">
            <summary>
            Returns a list of all connection string values
            </summary>
        </member>
        <member name="P:Penguin.Configuration.Abstractions.Interfaces.IProvideConfigurations.CanWrite">
            <summary>
            Can this provider persist values?
            </summary>
        </member>
        <member name="M:Penguin.Configuration.Abstractions.Interfaces.IProvideConfigurations.GetConfiguration(System.String)">
            <summary>
            Returns a single configuration value (or null)
            </summary>
            <param name="Key">The configuration key</param>
            <returns>The configuration value</returns>
        </member>
        <member name="M:Penguin.Configuration.Abstractions.Interfaces.IProvideConfigurations.GetConnectionString(System.String)">
            <summary>
            Gets a connection string by name
            </summary>
            <param name="Name">The name of the connection string</param>
            <returns>The connection string value</returns>
        </member>
        <member name="M:Penguin.Configuration.Abstractions.Interfaces.IProvideConfigurations.SetConfiguration(System.String,System.String)">
            <summary>
            Sets a configuration value
            </summary>
            <param name="Name">The name of the configuration to set</param>
            <param name="Value">The value to set it to</param>
            <returns>True if succeeded</returns>
        </member>
    </members>
</doc>